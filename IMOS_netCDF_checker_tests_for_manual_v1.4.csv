Version,Priority,Test type,Target,Check that,Only check if,CF 1.6,ACDD 1.1,Comments / questions
1.3,HIGH,attribute,<all string attributes>,not empty,,,,Global and variable attributes.
,,,,,,,,
1.3,HIGH,global attribute,project,value is "Integrated Marine Observing System (IMOS)",,,,
1.4,HIGH,global attribute,Conventions,'value includes "CF-1.6,IMOS-1.4"',,,,
1.3,HIGH,global attribute,title,is a string,,(Y),(Y),'CF checker checks type only, ACDD checks exists'
1.4,MED,global attribute,standard_name_vocabulary,value starts with "NetCDF Climate and Forecast (CF) Metadata Convention Standard Name Table Version",,,(Y),ACDD checks existence only
1.4,LOW,global attribute,institution,is a string,,,,'Name of the institute or facility where the original data was produced (mandatory, but not consistently used)'
1.3,HIGH,global attribute,date_created,value is valid timestamp "YYYY-MM-DDThh:mm:ssZ",,,,
1.3,HIGH,global attribute,abstract,is a string,,,,
1.3,HIGH,global attribute,naming_authority,value is "IMOS",,,,
1.3,HIGH,global attribute,geospatial_lat_min/max,'value matches latitude range in data, numeric type',if <LATITUDE> exists,,Y,'ACDD checks existence and approximate match against data, with MEDIUM priority. QC not taken into account! '
1.3,HIGH,global attribute,geospatial_lon_min/max,'value matches longitude range in data, numeric type',if <LONGITUDE> exists,,Y,'ACDD checks existence and approximate match against data, with MEDIUM priority. QC not taken into account! '
1.3,HIGH,global attribute,geospatial_vertical_min/max,value matches depth/height range in data,if <VERTICAL> exists AND featureType defined,,Y,'ACDD checks existence and approximate match against data, with MEDIUM priority. Fails if no vertical coordinate variable. QC not taken into account! '
1.3,HIGH,global attribute,time_coverage_start/end,'value matches time range in data, format "YYYY-MM-DDThh:mm:ssZ"',if <TIME> exists,,Y,'ACDD checks existence and approximate match against data, with MEDIUM priority. QC not taken into account! '
1.3,HIGH,global attribute,data_centre,value is "eMarine Information Infrastructure (eMII)" or "Australian Ocean Data Network (AODN)",,,,
1.3,HIGH,global attribute,data_centre_email,value is "info@emii.org.au” or "info@aodn.org.au",,,,
1.4,HIGH,global attribute,data_centre,value is "Australian Ocean Data Network (AODN)",,,,
1.4,HIGH,global attribute,data_centre_email,value is “info@aodn.org.au”,,,,
1.3,HIGH,global attribute,author,is a string,,,,
1.3,HIGH,global attribute,principal_investigator,is a string,,,,
1.3,HIGH,global attribute,citation,is a string,,,,Not checking value for now
1.4,LOW,global attribute,citation,'Check that value matches pattern “IMOS. [year-of-data-download], [Title], [Data access URL], accessed [date-of-access]”',,,,
1.4,HIGH,global attribute,acknowledgement,value includes text specified in NetCDF manual,,,,No longer accept old wording!
1.4,REMOVED,global attribute,distribution_statement,(No longer required),,,,
1.4,HIGH,global attribute,disclaimer,'value includes “Data, products and services from IMOS are provided "as is" without any warranty as to fitness for a particular purpose.”',,,,
1.4,HIGH,global attribute,license,value is “http://creativecommons.org/licenses/by/4.0/”,,,,
1.4,REMOVED,global attribute,netcdf_version,(No longer required),,,,
1.3,LOW,global attribute,file_version,value matches one of 3 possible values,if exists,,,'"Level 0 - Raw data", "Level 1 - Quality Controlled data", "Level 2 - Derived product"'
1.3,MED,global attribute,geospatial_lat_units,value is “degrees_north”,if exists,,,
1.3,MED,global attribute,geospatial_lon_units,value is “degrees_east”,if exists,,,
1.3,MED,global attribute,geospatial_vertical_units,value is a valid CF unit for depth,if exists,,,Should this match the units of the <VERTICAL> variable?
1.4,HIGH,global attribute,geospatial_vertical_positive,value is "up" or "down",if exists,,,Should this match <VERTICAL>:positive attribute?
1.3,MED,global attribute,local_time_zone,'value between -12. and 12., numeric type',if exists,,,
1.3,MED,global attribute,author_email,value looks like an email address,if exists,,,
1.3,MED,global attribute,principal_investigator_email,value looks like an email address,if exists,,,
1.4,REMOVED,global attribute,quality_control_set,(No longer required),,,,
,,,,,,,,
1.3,HIGH,variable attribute,<VAR>:long_name,is a string,,,,<VAR> refers to any variable
1.3,HIGH,variable attribute,<VAR>:_FillValue,has same data type as the variable,if exists,,,
1.4,MED,variable attribute,<VAR>:_FillValue,'value is a real number, i.e. not NaN',if exists,,,
1.3,HIGH,variable attribute,<VAR>:valid_min,has same data type as the variable,if exists,,,
1.3,HIGH,variable attribute,<VAR>:valid_max,has same data type as the variable,if exists,,,
,,,,,,,,
1.3,HIGH,variable,<COORD>,'has numeric type (byte, float, integer)',,,,'<COORD> refers to all coordinate variables, defined as a one-dimensional variable with the same name as its dimension. compliance_checker/cf/util.py has helper functions to identify coordinate variables'
1.3,HIGH,variable,<COORD>,order of values is strictly monotonic,,,,i.e. values are unique and always increasing or always decreasing
1.3,HIGH,variable,<COORD>,at least one coordinate variable is a spatio-temporal variable,,,,'One of <TIME>, <LATITUDE>, <LONGITUDE>, or <VERTICAL> as defined below. (This is not specified in the manual, but implied. Use helper functions from cf/util.py to identify spatio-temporal variables.)'
1.4,HIGH,variable,<COORD>,does NOT have a _FillValue attribute,,,,
,,,,,,,,
1.3,MED,variable,<TIME>,is type Double,if exists,,,'For now it is not mandatory to have a time variable. Use helper function is_time_variable (in cf/util.py) to identify a <TIME> variable (uses variable name = “time” (case-insensitive) OR standard_name="time" OR axis="T" OR units are time units). It doesn''t have to be called “TIME”.'
1.3,LOW,variable,<TIME>,variable name is “TIME”,if exists,,,
1.3,HIGH,variable attribute,<TIME>:standard_name,value is "time",if <TIME> exists,,,
1.3,LOW,variable attribute,<TIME>:long_name,value includes the word "time" (case insensitive),if <TIME> exists,,,
1.3,DONE (CF),variable attribute,<TIME>:units,value is a valid CF time unit,if <TIME> exists,Y,,DONE in CF checker
1.4,MED,variable attribute,<TIME>:units,reference time is in UTC,if <TIME> exists,,,Check that units & data type give sufficient time precision? (at least 1 second?)
1.4,LOW,variable attribute,<TIME>:units,value starts with "days” and reference time is 1950-01-01 00:00:00 UTC,if <TIME> exists,,,
1.3,HIGH,variable attribute,<TIME>:axis,value is "T",if <TIME> exists,(Y),,'CF checker checks value if axis exists, but ignores it if it doesn''t exist'
1.3,HIGH,variable attribute,<TIME>:valid_min,exists,if <TIME> exists,,,
1.3,HIGH,variable attribute,<TIME>:valid_max,exists,if <TIME> exists,,,
1.3,HIGH,variable attribute,<TIME>:calendar,value is "gregorian",if <TIME> exists,(Y),,CF checker checks existence and valid value (any calendar) with LOW priority only.
1.3,,,,,,,,
1.3,MED,variable,<LONGITUDE>,is type Double or Float,if exists,,,'For now it is not mandatory to have a longitude variable. <LONGITUDE> is any variable that has 1) variable name in _possiblex list (cf/util.py), OR  2) standard_name="longitude", OR  3) axis="X", OR  4) units in _possiblexunits list. It doesn''t have to be called “LONGITUDE”.'
1.3,LOW,variable,<LONGITUDE>,variable name is “LONGITUDE”,if exists,,,
1.3,HIGH,variable attribute,<LONGITUDE>:standard_name,value is "longitude",if <LONGITUDE> exists,,,
1.3,LOW,variable attribute,<LONGITUDE>:long_name,value includes the word "longitude" (case insensitive),if <LONGITUDE> exists,,,
1.3,MED,variable attribute,<LONGITUDE>:units,value is "degrees_east",if <LONGITUDE> exists,(Y),,CF checker allows variants like “degrees_E”
1.3,HIGH,variable attribute,<LONGITUDE>:axis,value is "X",if <LONGITUDE> exists,(Y),,'CF checker checks value if axis exists, but ignores it if it doesn''t exist'
1.3,HIGH,variable attribute,<LONGITUDE>:valid_min,'value of (valid_min, valid_max) is (0, 360) OR (-180, 180)',if <LONGITUDE> exists,,,
1.3,HIGH,variable attribute,<LONGITUDE>:valid_max,'value of (valid_min, valid_max) is (0, 360) OR (-180, 180)',if <LONGITUDE> exists,,,
1.3,HIGH,variable attribute,<LONGITUDE>:reference_datum,is a string,if <LONGITUDE> exists,,,'We''ll check values in a future version'
,,,,,,,,
1.3,MED,variable,<LATITUDE>,is type Double or Float,if exists,,,'For now it is not mandatory to have a latitude variable. <LATITUDE> is any variable that has 1) variable name in _possibley list (cf/util.py), OR  2) standard_name="latitude", OR  3) axis="Y", OR  4) units in _possibleyunits list. It doesn''t have to be called “LATITUDE”.'
1.3,LOW,variable,<LATITUDE>,variable name is “LATITUDE”,if exists,,,
1.3,HIGH,variable attribute,<LATITUDE>:standard_name,value is "latitude",if <LATITUDE> exists,,,
1.3,LOW,variable attribute,<LATITUDE>:long_name,value includes the word "latitude" (case insensitive),if <LATITUDE> exists,,,
1.3,MED,variable attribute,<LATITUDE>:units,value is "degrees_north",if <LATITUDE> exists,(Y),,CF checker allows variants like “degree_N”
1.3,HIGH,variable attribute,<LATITUDE>:axis,value is "Y",if <LATITUDE> exists,(Y),,'CF checker checks value if axis exists, but ignores it if it doesn''t exist'
1.3,HIGH,variable attribute,<LATITUDE>:valid_min,value is -90.,if <LATITUDE> exists,,,
1.3,HIGH,variable attribute,<LATITUDE>:valid_max,value is  90.,if <LATITUDE> exists,,,
1.3,HIGH,variable attribute,<LATITUDE>:reference_datum,is a string,if <LATITUDE> exists,,,'We''ll check values in a future version'
,,,,,,,,
1.3,MED,variable,<VERTICAL>,is type Double or Float,if exists,,,'For now it is not mandatory to have a vertical coordinate variable. Use a helper function similar to is_vertical_coordinate (in cf/util.py) to identify a <VERTICAL> variable, but exclude pressure vars (i.e. variable name or standard_name is “depth” or “height” (case-insensitive), OR positive attribute is “up” or “down”).'
1.3,HIGH,variable attribute,<VERTICAL>:standard_name,value is "depth" or “height”,if <VERTICAL> exists,,,
1.3,HIGH,variable attribute,<VERTICAL>:units,value is a valid CF distance unit,if <VERTICAL> exists,(Y),,'CF only checks it is valid in UDUNITS and consistent with standard_name, if provided'
1.3,HIGH,variable attribute,<VERTICAL>:axis,value is "Z",if <VERTICAL> exists,(Y),,'CF checker checks value if axis exists, but ignores it if it doesn''t exist'
1.3,HIGH,variable attribute,<VERTICAL>:positive,'value is "down" or “up”, consistent with standard_name',if <VERTICAL> exists,(Y),,'“down” for standard_name “depth, “up” for “height” (CF cheks it''s one of the two values, but not consistency with standard_name)'
1.3,HIGH,variable attribute,<VERTICAL>:valid_min,exists,if <VERTICAL> exists,,,
1.3,HIGH,variable attribute,<VERTICAL>:valid_max,exists,if <VERTICAL> exists,,,
1.4,HIGH,variable attribute,<VERTICAL>:reference_datum,'value is one of (“Mean Sea Level (MSL)”, “sea surface”, “sea bottom”, “sensor”)',if <VERTICAL> exists,,,
,,,,,,,,
1.4,MED,variable,<PRESSURE_AXIS>,is type Double or Float,if exists,,,'This applies only to cases where a pressure variable is used as a vertical axis, i.e. identified by (standard_name or units attribute) AND (existence of axis attribute OR being an auxiliary coordinate variable)'
1.4,HIGH,variable attribute,<PRESSURE_AXIS>:standard_name,'value is "sea_water_pressure", “sea_water_pressure_due_to_sea_water” or “air_pressure”',if <PRESSURE_AXIS> exists,,,
1.4,HIGH,variable attribute,<PRESSURE_AXIS>:units,value is a valid CF pressure unit,if <PRESSURE_AXIS> exists,(Y),,'CF only checks it is valid in UDUNITS and consistent with standard_name, if provided?'
1.4,HIGH,variable attribute,<PRESSURE_AXIS>:axis,value is "Z",if exists,,,
1.4,HIGH,variable attribute,<PRESSURE_AXIS>:valid_min,exists,if <PRESSURE_AXIS> exists,,,
1.4,HIGH,variable attribute,<PRESSURE_AXIS>:valid_max,exists,if <PRESSURE_AXIS> exists,,,
,,,,,,,,
1.3,HIGH,variable,<DATA>,at least one data variable exists in the file,,,,'Not mentioned in the manual, but a reasonable basic check. Use CFBaseCheck._find_data_vars (in cf/cf.py) to identify all <DATA> variables, i.e. vars that are not coordinate or anciallary variables.'
1.3,DONE (CF),variable attribute,<DATA>:standard_name,value is valid CF standard name,if exists,Y,,
1.3,DONE (CF),variable attribute,<DATA>:units,value is a valid CF unit,if exists,Y,,'For dimensionless quantities, CF only allows a few options (“1”, “percent”, “1e-3”), otherwise attribute should not be present.'
1.4,HIGH,variable attribute,<DATA>:units,exists (even if dimensionless),,,,'Use “1”, “1e-3”, “percent” or “ppm” for dimensionless quantities.'
1.4,REMOVED,variable attribute,<DATA>:_FillValue,(no longer mandatory),,,,
1.3,DONE (CF),variable attribute,<DATA>:ancillary_variables,all variables listed in value exist in file,if exists,Y,,
1.4,REMOVED,variable attribute,<DATA>:quality_control_set,(No longer required),,,,
1.4,HIGH,variable attribute,<DATA>:coordinates,'value is a blank-separated list of variable names, which must be present in the file',,(Y),,CF only checks this for DSG files
,,,,,,,,
1.3,HIGH,variable,<QC>,variable name matches “<DATA>_quality_control” for a variable in the file named  “<DATA>”,if exists,,,'<QC> is any quality-control variable. Identify these as any variable that 1) has a name that ends in “_quality_control”, OR 2) standard_name ends in "status_flag" OR long_name contains "status_flag" or "quality flag",  OR 3) has a flag_values, or flag_meanings attribute. The associated <DATA> variable is defined by this rule.'
1.3,HIGH,variable,<QC>,has same dimensions as associated <DATA> variable,if exists,,,
1.3,MED,variable attribute,<DATA>:ancillary_variables,value includes name of <QC> varliabe,if <QC> exists,,,'i.e. if <QC> variable exists, it must be listed in the associated <DATA> variable''s ancillary_variables attribute'
1.3,HIGH,variable attribute,<QC>:standard_name,value = (standard_name of the <DATA> variable) + "status_flag",if <DATA>:standard_name exists,(Y),,'CF checker validates standard_name but doesn''t require it to exist or have "status_flag"'
1.4,REMOVED,variable attribute,<QC>:quality_control_set,(No longer required),,,,
1.4,MED,variable attribute,<QC>:quality_control_conventions,value matches one of the 4 possible values,if <QC> exists,,,'(“IMOS standard flags”, “ARGO quality control procedure”, “BOM (SST and Air-Sea flux) quality control procedure”, “WOCE quality control procedure”), IMOS NetCDF manual v1.4, Reference Table A'
1.3,DONE (CF),variable attribute,<QC>:flag_values,is a list of values of the same type as the <QC> variable,if <QC> exists,Y,,
1.4,LOW,variable attribute,<QC>:flag_values,Check that values match the quality_control_conventions specified,if <QC> exists,,,'IMOS NetCDF manual v1.4, Reference Tables B, C, E, F'
1.3,DONE (CF),variable attribute,<QC>:flag_meanings,'is a string of blank-separated meanings, same number as flag_values',if <QC> exists,Y,,
1.4,LOW,variable attribute,<QC>:flag_meanings,Check that values match the quality_control_conventions specified,if <QC> exists,,,'IMOS NetCDF manual v1.4, Reference Tables B, C, E, F'
1.4,MED,variable attribute,<QC>:quality_control_global,is a string,if either quality_control_global or quality_control_global_conventions exists,,,'i.e. if either of these exists, the other should too, and they should be strings'
1.4,MED,variable attribute,<QC>:quality_control_global_conventions,is a string,if either quality_control_global or quality_control_global_conventions exists,,,'i.e. if either of these exists, the other should too, and they should be strings'
,,,,,,,,
1.3,HIGH,file name,file name,extension is "nc",,,,
1.3,HIGH,file name,file name,'name contains 6 to 10 fields, separated by "_"',,,,Not including extension. Fields made up of characters [a-zA-Z0-9-].
1.3,HIGH,file name,file name,Field 1 is "IMOS",,,,
1.3,HIGH,file name,file name,Field 2 is a valid facility/sub-facility code,,,,'IMOS Filenaming convention, Ref Table 1. Matches "institution" global attribute?'
1.3,HIGH,file name,file name,Field 3 is made up of the characters "ABCEFGIKMOPRSTUVWZ",,,,'IMOS Filenaming convention, Ref Table 2. Check against variables in the file??'
1.3,HIGH,file name,file name,'Field 4 matches time_coverage_start attribute, format "YYYYMMDDTHHMMSSZ"',,,,
1.3,HIGH,file name,file name,Field 5 is a valid IMOS platform code,,,,'IMOS Filenaming convention, Ref Table 3. Should be in database!'
1.3,HIGH,file name,file name,Field 5 matches platform_code or site_code global attribute,if attributes exist,,,'Conventions doc says platform code, but we use site_code for ANMN files.'
1.3,HIGH,file name,file name,'Field 6 is one of ("FV00", "FV01", "FV02")',,,,
1.3,HIGH,file name,file name,Field 6 consistent with file_version attribute,if file_version exists,,,Field should be “FV0X” where file_version starts with "Level X"
1.3,MED,file name,file name,Field >6 meets one of the following conditions,if exists,,,Each condition must only match one field!
1.3,MED,file name,file name,1) is a non-empty string (product type),if exists,,,Value is facility-specific
1.3,MED,file name,file name,'2) matches time_coverage_end attribute, format "END-YYYYMMDDTHHMMSSZ"',if exists,,,
1.3,MED,file name,file name,'3) matches date_created attribute, format "C-YYYYMMDDTHHMMSSZ"',if exists,,,
1.3,MED,file name,file name,4) matches regexp "PART\d+",if exists,,,
